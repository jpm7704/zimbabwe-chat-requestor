
import { RequestType, RequestStatus } from "@/types";
import { supabase } from "@/integrations/supabase/client";

/**
 * Create a new request
 */
export const createRequest = async (
  requestData: {
    type: RequestType;
    title: string;
    description: string;
  }
): Promise<{ requestId: string, ticketNumber: string }> => {
  try {
    const { data: session } = await supabase.auth.getSession();
    if (!session.session?.user) {
      throw new Error("No user is logged in");
    }

    const userId = session.session.user.id;

    // Generate a temporary ticket number for insertion
    // The actual ticket number will be generated by the database trigger
    const tempTicketNumber = `TEMP-${Date.now()}`;

    // Insert the request into the database with a temporary ticket number
    // The database trigger will override this with the correct format
    const { data, error } = await supabase
      .from('requests')
      .insert({
        user_id: userId,
        type: requestData.type,
        title: requestData.title,
        description: requestData.description,
        status: 'submitted' as RequestStatus,
        ticket_number: tempTicketNumber
      })
      .select('id, ticket_number')
      .single();

    if (error) {
      console.error("Error creating request:", error);
      throw error;
    }

    return { 
      requestId: data.id, 
      ticketNumber: data.ticket_number 
    };
  } catch (error) {
    console.error("Error in createRequest:", error);
    throw error;
  }
};
